{
    "contents" : "plym7cap <- function(crittype = 2, antype = 0, msave = FALSE) { \n  # Apply learning criterion\n  pass <- subset(bigdta, phase == 3 & stim < 9 & blk < blktype+1)\n  trls <- 8 * blktype # Number of trials making up the criterion-passing test\n  pass.sc <- (2/3) * (blktype * 10) # Note, * 10 rather than * 8, due to double-weighting of prototype.\n  # Work out training item score\n  o <- 0\n  corr <- array(0, dim=c(ppts,4))\n  colnames(corr) <- c('subj','cond','cb','correct') \n  for (j in 1:ppts) {\n    for (i in 1:trls) {\n      if ( pass[i+o,'stim'] == 1 | pass[i+o,'stim'] == 5 ) inc <- 2 else inc <- 1\n      if ( pass[i+o,'stim'] < 5 & pass[i+o,'resp'] == 1 ) corr[j,4] = corr[j,4] + inc\n      if ( pass[i+o,'stim'] > 4 & pass[i+o,'resp'] == 0 ) corr[j,4] = corr[j,4] + inc\t\n    }\n    corr[j,1] <- pass[o+1,'subj']\n    corr[j,2] <- pass[o+1,'cond']\n    corr[j,3] <- pass[o+1,'cb']\n    o <- o + trls\n  }\n  corr <- as.data.frame(corr)\n  # If appropriate, select only passing participants\n  if (crittype == 2) {passes <- subset(corr, correct >= pass.sc)} else {passes <- corr}\n  passdta <- NULL\n  for (i in passes$subj) {\n    passdta <- rbind(passdta, subset(bigdta, subj == i & phase == 3))\n  }\t\t\t\n  # Now examine scores on the critical stimuli\n  # Extract test phase critical stimuli\n  critstim <- subset(passdta, stim > 8 & stim < 11)\n  ppts <- length(passes$subj)\n  trls <- 16\n  #Run loop to count how many times participants made judgements of FR or CA on critical items\n  o <- 0\n  count <- array(0, dim=c(ppts,5))\n  colnames(count) <- c('ppt','cond','cb','famres','critatt')\n  for (j in 1:ppts) {\n    for (i in 1:trls) {\n      if (critstim[i + o, 'stim'] == 9 & critstim[i + o, 'resp'] == 1) count[j,4] = count[j,4] + 1\n      if (critstim[i + o, 'stim'] == 9 & critstim[i + o, 'resp'] == 0) count[j,5] = count[j,5] + 1\n      if (critstim[i + o, 'stim'] == 10 & critstim[i + o, 'resp'] == 1) count[j,5] = count[j,5] + 1\n      if (critstim[i + o, 'stim'] == 10 & critstim[i + o, 'resp'] == 0) count[j,4] = count[j,4] + 1\n    }\n    count[j,1] <- critstim[o+1,'subj']\n    count[j,2] <- critstim[o+1,'cond']\n    count[j,3] <- critstim[o+1,'cb']\n    o <- o + trls\n  }\n  count <- as.data.frame(count)\n  count$famres <- count$famres / 16\n  count$critatt <- count$critatt / 16\n  print(\"Total participants per condition\")\n  print(paste(\"Load: \",length(corr$subj[corr$cond == 1])))\n  print(paste(\"Full attention: \",length(corr$subj[corr$cond == 2])))\n  print(\"Participants passing criterion, per condition\")\n  print(paste(\"Load: \",length(passes$subj[passes$cond == 1])))\n  print(paste(\"Full attention: \",length(passes$subj[passes$cond == 2])))\n  print(\"Traditional analysis\")\n  print(\"OS by condition t-test\")\n  print(t.test(famres~cond, data = count,var.equal=TRUE))\n  print(\"Response-set analysis\")\n  if (antype == 0) {\n    trls <- 128  \n  } else {\n    trls <- 80\n    passdta <- subset(passdta, stim < 11)\n  } \n  bigmod <- array(0, dim=c(ppts,12))\n  colnames(bigmod) <- c(\"pptno\",\"cond\",\"cb\",\"fr\", \"ca\", \"nca1\", \"nca2\", \"nca3\", \"lk\", \"rk\", \"model\", \"consist\")\n  o <- 0\n  for (j in 1:ppts) {\n    mdl <- c(0,0,0,0,0,0,0)\n    for(i in 1:trls) {\n      # This first part deals with the fact that some stimulus are ambiguous on an FR strategy.\n      if (code[passdta[i+o,'stim'],'fr'] == 0.5) {\n        mdl[1]= mdl[1] + 0.5\n      } else { \n        if (code[passdta[i+o,'stim'],'fr'] == passdta[i+o,'resp']) mdl[1] = mdl[1] + 1\n      }\n      if (code[passdta[i+o,'stim'], 'ca'] == passdta[i+o,'resp']) mdl[2] = mdl[2] + 1\n      if (code[passdta[i+o,'stim'], 'nca1'] == passdta[i+o,'resp']) mdl[3] = mdl[3] + 1\n      if (code[passdta[i+o,'stim'], 'nca2'] == passdta[i+o,'resp']) mdl[4] = mdl[4] + 1\n      if (code[passdta[i+o,'stim'], 'nca3'] == passdta[i+o,'resp']) mdl[5] = mdl[5] + 1\n      if (code[passdta[i+o,'stim'], 'lk'] == passdta[i+o,'resp']) mdl[6] = mdl[6] + 1\n      if (code[passdta[i+o,'stim'], 'rk'] == passdta[i+o,'resp']) mdl[7] = mdl[7] + 1\n    }\n    bigmod[j,'pptno'] <- passdta[o+1,'subj']\n    bigmod[j,'cond'] <- passdta[o+1,'cond']\n    bigmod[j,'cb'] <- passdta[o+1,'cb']\n    bigmod[j,4:10] = mdl\n    bigmod[j,'model'] = which.max(mdl)\n    bigmod[j,'consist'] = max(mdl)\n    o = o + trls\n  }\n  # Model: 1-FR; 2-CA; 3-5-NCA; 6-7-KEY\n  \n  print(\"Response-set descriptives\")\n  mbt <- table(bigmod[,'cond'],bigmod[,'model'])\n  \n  # Hand-code fudge: FR never occurs, so no level on mbt for it...\n  # This has to be changed by hand therefore.\n  if (antype == 0) {\n    # Hand-code fudge: FR never occurs, so no level on mbt for it...\n    # This has to be changed by hand therefore.\n    fr <- c(0,0) \n    ca <- mbt[,1]\n    nca <- mbt[,2] + mbt[,3] + mbt[,4]   \n  }\n  \n  if (antype == 1) {\n    fr <- mbt[,1] \n    ca <- mbt[,2]\n    nca <- mbt[,3] + mbt[,4] + mbt[,5]   \n  }\n  \n  mbts <- cbind(fr,ca,nca)\n  row.names(mbts) <- c('LOAD','FULL')\n  mbts[1,] <- mbts[1,]/sum(mbts[1,])\n  mbts[2,] <- mbts[2,]/sum(mbts[2,])\n  print(mbts)\n  # Back to counts for chi-square\n  mbts <- cbind(fr,ca,nca)\n  row.names(mbts) <- c('LOAD','FULL')\n  # More fudge coding to deal with absence of OS.\n  if (antype == 0) {\n    print(\"NCA vs CA\")\n    c <- rbind(c(mbts[1,'nca'],mbts[1,'fr']+mbts[1,'ca']),c(mbts[2,'nca'],mbts[2,'fr']+mbts[2,'ca']))\n    print(chisq.test(c,correct=FALSE))    \n  }\n  if (antype == 1) {\n    print(\"NCA vs Other\")\n    c <- rbind(c(mbts[1,'nca'],mbts[1,'fr']+mbts[1,'ca']),c(mbts[2,'nca'],mbts[2,'fr']+mbts[2,'ca']))\n    print(chisq.test(c,correct=FALSE))\n    print(\"CA vs other\")\n    c <- rbind(c(mbts[1,'ca'],mbts[1,'fr']+mbts[1,'nca']),c(mbts[2,'ca'],mbts[2,'fr']+mbts[2,'nca']))\n    print(chisq.test(c,correct=FALSE))\n  }\n  \n\n  print(\"SUPPLEMENTARY ANALYSES\")\n  # Removing the position bias people...\n  bigmod <- bigmod[bigmod[,'model'] < 5,]\n  bigmf <- as.data.frame(bigmod)\n  # ...and combining the three NCA strategies\n  bigmf$model[bigmf$model == 1] <- 'fr'\n  bigmf$model[bigmf$model == 2] <- 'ca'\n  bigmf$model[bigmf$model == 3] <- 'nca'\n  bigmf$model[bigmf$model == 4] <- 'nca'\n  bigmf$model[bigmf$model == 5] <- 'nca'\n  \n  # Create a NCA column, selecting the best of the three UD fits\n  bigmf$nca <- pmax(bigmf$nca1,bigmf$nca2,bigmf$nca3)\n  \n  # Closest competitor analysis\n  bigmf$win.margin <- 0\n  for (i in 1:nrow(bigmf)) {\n    tmp <- c(bigmf[i,'fr'],bigmf[i,'ca'],bigmf[i,'nca'])\n    tmp <- tmp[order(tmp)]\n    bigmf$win.margin[i] <- tmp[3] - tmp[2]\n  }\n  \n  #Convert to proportions\n  bigmf$consist <- bigmf$consist / trls\n  bigmf$fr <- bigmf$fr / trls\n  bigmf$ca <- bigmf$ca / trls\n  bigmf$nca <- bigmf$nca / trls\n  bigmf$win.margin <- bigmf$win.margin / trls\n  \n  #Relabel conditions for ease\n  bigmf$cond[bigmf$cond==1] <- 'load'\n  bigmf$cond[bigmf$cond==2] <- 'noload'\n  \n  if(msave==TRUE) save(bigmf,file='plym7models.RData')\n  \n  print('Table S5')\n  \n  print('N (all cells)')\n  print(aggregate(consist ~ model + cond,data=bigmf,length))\n  \n  print('Consistency (all cells)')\n  print(aggregate(consist ~ model + cond,data=bigmf,mean))\n  \n  print('Margin (all cells)')\n  print(aggregate(win.margin ~ model + cond,data=bigmf,mean))\n  \n  print('Consistency (collapse condition)')\n  print(aggregate(consist ~ model,data=bigmf,mean))\n  \n  print('Margin (collapse condition)')\n  print(aggregate(win.margin ~ model,data=bigmf,mean))\n  \n  print('Consistency (collapse models)')\n  print(aggregate(consist ~ cond,data=bigmf,mean))\n  \n  print('Margin (collapse models)')\n  print(aggregate(win.margin ~ cond,data=bigmf,mean))\n  \n  print('Remove OS (sample too small)')\n  bigmfnoos <- bigmf[bigmf$model != 'fr',]\n  print('Response model type effect on consistency')\n  print(t.test(consist ~ model, data = bigmfnoos,var.equal=TRUE))\n  print('Response model type effect on margin')\n  print(t.test(win.margin ~ model, data = bigmfnoos,var.equal=TRUE))\n  \n  print('Concurrent load effect on consistency')\n  print(t.test(consist ~ cond, data = bigmf,var.equal=TRUE))\n  print('Concurrent load effect on margin')\n  print(t.test(win.margin ~ cond, data = bigmf,var.equal=TRUE)) \n  \n  \n  \n  \n  \n}\n",
    "created" : 1402908641008.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3392919185",
    "id" : "93688F78",
    "lastKnownWriteTime" : 1417621794,
    "path" : "~/Dropbox/PROJECTS/PROJECTS/DAUs/plym7 PLY_15 (Smith Shapiro)/plym7willslab/plym7cap.R",
    "project_path" : "plym7cap.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}
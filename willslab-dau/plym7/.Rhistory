'cb5:R2D34','cb6:R2D234','cb7:R3D24',
'cb8:R3D23','cb9:D1','cb10:D14',
'cb11:R1D13','cb12:R1D12','cb13:R2D134'
,'cb14:R2D1234','cb15:R3D124','cb16:D123')
write.table(cb,file="plym7cb.txt",sep = "\t", row.names = FALSE)
rm(list=ls())
print("DAU: PLYM7")
print("Author: Andy Wills")
print("Credits: Developed from script by Angus Inkster")
print("Date: 2014-06-16")
source("plym7cap.R")
bigdta <- read.table("plym7data.txt", header = TRUE, sep = "\t")
code <- read.table("plym7code.txt", header = TRUE, sep = "\t",stringsAsFactors = FALSE)
ppts <- 82
blktype <- 3
print("PRIMARY ANALYSIS - Nonlearners excluded, all stimuli analysed")
plym5cap(crittype = 2, antype = 0)
plym7cap(crittype = 2, antype = 0)
plym7cap(crittype = 2, antype = 0)
source("plym7cap.R")
plym7cap(crittype = 2, antype = 0)
View(bigdta)
crittype = 2
antype = 0
pass <- subset(bigdta, phase == 3 & stim < 9 & blk < blktype+1)
trls <- 8 * blktype # Number of trials making up the criterion-passing test
pass.sc <- (2/3) * (blktype * 10) # Note, * 10 rather than * 8, due to double-weighting of prototype.
# Work out training item score
o <- 0
corr <- array(0, dim=c(ppts,5))
colnames(corr) <- c('subj','cond','cb','keyb','correct')
for (j in 1:ppts) {
for (i in 1:trls) {
if ( pass[i+o,'stim'] == 1 | pass[i+o,'stim'] == 5 ) inc <- 2 else inc <- 1
if ( pass[i+o,'stim'] < 5 & pass[i+o,'resp'] == 1 ) corr[j,5] = corr[j,5] + inc
if ( pass[i+o,'stim'] > 4 & pass[i+o,'resp'] == 0 ) corr[j,5] = corr[j,5] + inc
}
corr[j,1] <- pass[o+1,'subj']
corr[j,2] <- pass[o+1,'cond']
corr[j,3] <- pass[o+1,'cb']
o <- o + trls
}
corr <- as.data.frame(corr)
# If appropriate, select only passing participants
if (crittype == 2) {passes <- subset(corr, correct >= pass.sc)} else {passes <- corr}
passdta <- NULL
for (i in passes$subj) {
passdta <- rbind(passdta, subset(bigdta, subj == i & phase == 2))
}
# Now examine scores on the critical stimuli
# Extract test phase critical stimuli
critstim <- subset(passdta, stim > 8 & stim < 11)
ppts <- length(passes$subj)
trls <- 16
#Run loop to count how many times participants made judgements of FR or CA on critical items
o <- 0
count <- array(0, dim=c(ppts,6))
colnames(count) <- c('ppt','cond','cb','keyb','famres','critatt')
for (j in 1:ppts) {
for (i in 1:trls) {
if (critstim[i + o, 'stim'] == 9 & critstim[i + o, 'resp'] == 1) count[j,5] = count[j,5] + 1
if (critstim[i + o, 'stim'] == 9 & critstim[i + o, 'resp'] == 0) count[j,6] = count[j,6] + 1
if (critstim[i + o, 'stim'] == 10 & critstim[i + o, 'resp'] == 1) count[j,6] = count[j,6] + 1
if (critstim[i + o, 'stim'] == 10 & critstim[i + o, 'resp'] == 0) count[j,5] = count[j,5] + 1
}
count[j,1] <- critstim[o+1,'subj']
count[j,2] <- critstim[o+1,'cond']
count[j,3] <- critstim[o+1,'cb']
o <- o + trls
}
pass <- subset(bigdta, phase == 3 & stim < 9 & blk < blktype+1)
trls <- 8 * blktype # Number of trials making up the criterion-passing test
pass.sc <- (2/3) * (blktype * 10) # Note, * 10 rather than * 8, due to double-weighting of prototype.
# Work out training item score
o <- 0
corr <- array(0, dim=c(ppts,5))
colnames(corr) <- c('subj','cond','cb','keyb','correct')
for (j in 1:ppts) {
for (i in 1:trls) {
if ( pass[i+o,'stim'] == 1 | pass[i+o,'stim'] == 5 ) inc <- 2 else inc <- 1
if ( pass[i+o,'stim'] < 5 & pass[i+o,'resp'] == 1 ) corr[j,5] = corr[j,5] + inc
if ( pass[i+o,'stim'] > 4 & pass[i+o,'resp'] == 0 ) corr[j,5] = corr[j,5] + inc
}
corr[j,1] <- pass[o+1,'subj']
corr[j,2] <- pass[o+1,'cond']
corr[j,3] <- pass[o+1,'cb']
o <- o + trls
}
corr <- as.data.frame(corr)
# If appropriate, select only passing participants
if (crittype == 2) {passes <- subset(corr, correct >= pass.sc)} else {passes <- corr}
passdta <- NULL
for (i in passes$subj) {
passdta <- rbind(passdta, subset(bigdta, subj == i & phase == 3))
}
# Now examine scores on the critical stimuli
# Extract test phase critical stimuli
critstim <- subset(passdta, stim > 8 & stim < 11)
ppts <- length(passes$subj)
trls <- 16
#Run loop to count how many times participants made judgements of FR or CA on critical items
o <- 0
count <- array(0, dim=c(ppts,6))
colnames(count) <- c('ppt','cond','cb','keyb','famres','critatt')
for (j in 1:ppts) {
for (i in 1:trls) {
if (critstim[i + o, 'stim'] == 9 & critstim[i + o, 'resp'] == 1) count[j,5] = count[j,5] + 1
if (critstim[i + o, 'stim'] == 9 & critstim[i + o, 'resp'] == 0) count[j,6] = count[j,6] + 1
if (critstim[i + o, 'stim'] == 10 & critstim[i + o, 'resp'] == 1) count[j,6] = count[j,6] + 1
if (critstim[i + o, 'stim'] == 10 & critstim[i + o, 'resp'] == 0) count[j,5] = count[j,5] + 1
}
count[j,1] <- critstim[o+1,'subj']
count[j,2] <- critstim[o+1,'cond']
count[j,3] <- critstim[o+1,'cb']
o <- o + trls
}
count <- as.data.frame(count)
count$famres <- count$famres / 16
count$critatt <- count$critatt / 16
print("Total participants per condition")
print(paste("Intentional: ",length(corr$subj[corr$cond == 1])))
print(paste("Incidental: ",length(corr$subj[corr$cond == 2])))
print("Participants passing criterion, per condition")
print(paste("Intentional: ",length(passes$subj[passes$cond == 1])))
print(paste("Incidental: ",length(passes$subj[passes$cond == 2])))
rm(list=ls())
bigdta <- read.table("plym7data.txt", header = TRUE, sep = "\t")
code <- read.table("plym7code.txt", header = TRUE, sep = "\t",stringsAsFactors = FALSE)
ppts <- 82
#blktype = 3: First three blocks, for match to KN84
#blktype = 8: All blocks, as perhaps the most natural test for our experiment.
blktype = 8
# crittype = 0: All participants included.
# crittype = 2: Prototypes score 2 points, others 1 point, 20+ to pass
crittype <- 2
# antype = 0 : All test stimuli included
# antype = 1 : Only the 10 stimuli for with the OS model makes a clear prediction are included.
antype <- 0
# Apply learning criterion
pass <- subset(bigdta, phase == 3 & stim < 9 & blk < blktype+1)
trls <- 8 * blktype # Number of trials making up the criterion-passing test
pass.sc <- (2/3) * (blktype * 10)
# Work out training item score
o <- 0
corr <- array(0, dim=c(ppts,4))
colnames(corr) <- c('subj','cond','cb','correct')
for (j in 1:ppts) {
for (i in 1:trls) {
if ( pass[i+o,'stim'] == 1 | pass[i+o,'stim'] == 5 ) inc <- 2 else inc <- 1
if ( pass[i+o,'stim'] < 5 & pass[i+o,'resp'] == 1 ) corr[j,4] = corr[j,4] + inc
if ( pass[i+o,'stim'] > 4 & pass[i+o,'resp'] == 0 ) corr[j,4] = corr[j,4] + inc
}
corr[j,1] <- pass[o+1,'subj']
corr[j,2] <- pass[o+1,'cond']
corr[j,3] <- pass[o+1,'cb']
o <- o + trls
}
corr <- as.data.frame(corr)
# If appropriate, select only passing participants
if (crittype == 2) {passes <- subset(corr, correct >= pass.sc)} else {passes <- corr}
passdta <- NULL
for (i in passes$subj) {
passdta <- rbind(passdta, subset(bigdta, subj == i & phase == 3))
}
# Now examine scores on the critical stimuli
# Extract test phase critical stimuli
critstim <- subset(passdta, stim > 8 & stim < 11)
ppts <- length(passes$subj)
trls <- 16
#Run loop to count how many times participants made judgements of FR or CA on critical items
o <- 0
count <- array(0, dim=c(ppts,5))
colnames(count) <- c('ppt','cond','cb','famres','critatt')
for (j in 1:ppts) {
for (i in 1:trls) {
if (critstim[i + o, 'stim'] == 9 & critstim[i + o, 'resp'] == 1) count[j,4] = count[j,4] + 1
if (critstim[i + o, 'stim'] == 9 & critstim[i + o, 'resp'] == 0) count[j,5] = count[j,5] + 1
if (critstim[i + o, 'stim'] == 10 & critstim[i + o, 'resp'] == 1) count[j,5] = count[j,5] + 1
if (critstim[i + o, 'stim'] == 10 & critstim[i + o, 'resp'] == 0) count[j,4] = count[j,4] + 1
}
count[j,1] <- critstim[o+1,'subj']
count[j,2] <- critstim[o+1,'cond']
count[j,3] <- critstim[o+1,'cb']
o <- o + trls
}
# Force into data frame
count <- as.data.frame(count)
# Descriptive Statistics: subset data frame and calculate means
loaddta <- subset(count, cond == 1)
fulldta <- subset(count, cond == 2)
colMeans(loaddta)
colMeans(fulldta)
# Family resemblance by condition t-test (the t-test for Critical Attribute would be the same logically)
t.test(famres~cond, data = count,var.equal=TRUE)
rm(list=ls())
bigdta <- read.table("plym7data.txt", header = TRUE, sep = "\t")
code <- read.table("plym7code.txt", header = TRUE, sep = "\t",stringsAsFactors = FALSE)
ppts <- 82
blktype <- 3
print("PRIMARY ANALYSIS - Nonlearners excluded, all stimuli analysed")
crittype = 2
antype = 0
pass <- subset(bigdta, phase == 3 & stim < 9 & blk < blktype+1)
trls <- 8 * blktype # Number of trials making up the criterion-passing test
pass.sc <- (2/3) * (blktype * 10) # Note, * 10 rather than * 8, due to double-weighting of prototype.
o <- 0
corr <- array(0, dim=c(ppts,4))
colnames(corr) <- c('subj','cond','cb','correct')
for (j in 1:ppts) {
for (i in 1:trls) {
if ( pass[i+o,'stim'] == 1 | pass[i+o,'stim'] == 5 ) inc <- 2 else inc <- 1
if ( pass[i+o,'stim'] < 5 & pass[i+o,'resp'] == 1 ) corr[j,4] = corr[j,4] + inc
if ( pass[i+o,'stim'] > 4 & pass[i+o,'resp'] == 0 ) corr[j,4] = corr[j,4] + inc
}
corr[j,1] <- pass[o+1,'subj']
corr[j,2] <- pass[o+1,'cond']
corr[j,3] <- pass[o+1,'cb']
o <- o + trls
}
corr <- as.data.frame(corr)
# If appropriate, select only passing participants
if (crittype == 2) {passes <- subset(corr, correct >= pass.sc)} else {passes <- corr}
passdta <- NULL
for (i in passes$subj) {
passdta <- rbind(passdta, subset(bigdta, subj == i & phase == 3))
}
critstim <- subset(passdta, stim > 8 & stim < 11)
ppts <- length(passes$subj)
trls <- 16
#Run loop to count how many times participants made judgements of FR or CA on critical items
o <- 0
count <- array(0, dim=c(ppts,5))
colnames(count) <- c('ppt','cond','cb','keyb','famres','critatt')
colnames(count) <- c('ppt','cond','cb','famres','critatt')
for (j in 1:ppts) {
for (i in 1:trls) {
if (critstim[i + o, 'stim'] == 9 & critstim[i + o, 'resp'] == 1) count[j,4] = count[j,4] + 1
if (critstim[i + o, 'stim'] == 9 & critstim[i + o, 'resp'] == 0) count[j,5] = count[j,5] + 1
if (critstim[i + o, 'stim'] == 10 & critstim[i + o, 'resp'] == 1) count[j,5] = count[j,5] + 1
if (critstim[i + o, 'stim'] == 10 & critstim[i + o, 'resp'] == 0) count[j,4] = count[j,4] + 1
}
count[j,1] <- critstim[o+1,'subj']
count[j,2] <- critstim[o+1,'cond']
count[j,3] <- critstim[o+1,'cb']
o <- o + trls
}
count <- as.data.frame(count)
count$famres <- count$famres / 16
count$critatt <- count$critatt / 16
print("Total participants per condition")
print(paste("Load: ",length(corr$subj[corr$cond == 1])))
print(paste("Full attention: ",length(corr$subj[corr$cond == 2])))
print("Participants passing criterion, per condition")
print(paste("Load: ",length(passes$subj[passes$cond == 1])))
print(paste("Full attention: ",length(passes$subj[passes$cond == 2])))
print("Traditional analysis")
print("OS by condition t-test")
print(t.test(famres~cond, data = count,var.equal=TRUE))
print("Response-set analysis")
if (antype == 0) {
trls <- 128
} else {
trls <- 80
passdta <- subset(passdta, stim < 11)
}
colnames(bigmod) <- c("pptno","cond","cb","fr", "ca", "nca1", "nca2", "nca3", "lk", "rk", "model", "consist")
bigmod <- array(0, dim=c(ppts,12))
colnames(bigmod) <- c("pptno","cond","cb","fr", "ca", "nca1", "nca2", "nca3", "lk", "rk", "model", "consist")
o <- 0
for (j in 1:ppts) {
mdl <- c(0,0,0,0,0,0,0)
for(i in 1:trls) {
# This first part deals with the fact that some stimulus are ambiguous on an FR strategy.
if (code[passdta[i+o,'stim'],'fr'] == 0.5) {
mdl[1]= mdl[1] + 0.5
} else {
if (code[passdta[i+o,'stim'],'fr'] == passdta[i+o,'resp']) mdl[1] = mdl[1] + 1
}
if (code[passdta[i+o,'stim'], 'ca'] == passdta[i+o,'resp']) mdl[2] = mdl[2] + 1
if (code[passdta[i+o,'stim'], 'nca1'] == passdta[i+o,'resp']) mdl[3] = mdl[3] + 1
if (code[passdta[i+o,'stim'], 'nca2'] == passdta[i+o,'resp']) mdl[4] = mdl[4] + 1
if (code[passdta[i+o,'stim'], 'nca3'] == passdta[i+o,'resp']) mdl[5] = mdl[5] + 1
if (code[passdta[i+o,'stim'], 'lk'] == passdta[i+o,'resp']) mdl[6] = mdl[6] + 1
if (code[passdta[i+o,'stim'], 'rk'] == passdta[i+o,'resp']) mdl[7] = mdl[7] + 1
}
bigmod[j,'pptno'] <- passdta[o+1,'subj']
bigmod[j,'cond'] <- passdta[o+1,'cond']
bigmod[j,'cb'] <- passdta[o+1,'cb']
bigmod[j,4:10] = mdl
bigmod[j,'model'] = which.max(mdl)
bigmod[j,'consist'] = max(mdl)
o = o + trls
}
print("Response-set descriptives")
mbt <- table(bigmod[,'cond'],bigmod[,'model'])
mbt
# Hand-code fudge: FR never occurs, so no level on mbt for it...
# This has to be changed by hand therefore.
if (antype == 0) {
# Hand-code fudge: FR never occurs, so no level on mbt for it...
# This has to be changed by hand therefore.
fr <- c(0,0)
ca <- mbt[,1]
nca <- mbt[,2] + mbt[,3] + mbt[,4]
}
if (antype == 1) {
fr <- mbt[,1]
ca <- mbt[,2]
nca <- mbt[,3] + mbt[,4] + mbt[,5]
}
mbts <- cbind(fr,ca,nca)
mbts
row.names(mbts) <- c('LOAD','FULL')
mbts[1,] <- mbts[1,]/sum(mbts[1,])
mbts[2,] <- mbts[2,]/sum(mbts[2,])
print(mbts)
print("Consistency by condition (only the means are reported in paper)") # Look at consistency, removing the position bias people
bigmex <- bigmod[bigmod[,'model'] < 6,]
bigmfex <- as.data.frame(bigmex)
bigmfex$consist <- bigmfex$consist/trls
tdta <- subset(bigmfex, cond == 1 | cond == 2, select=c('cond','consist'))
print(t.test(consist ~ cond, data = tdta,var.equal=TRUE))
# Back to counts for chi-square
mbts <- cbind(fr,ca,nca)
row.names(mbts) <- c('LOAD','FULL')
mbts
dir()
dir
dir()
print("NCA vs other")
c <- rbind(c(mbts[1,'nca'],mbts[1,'fr']+mbts[1,'ca']),c(mbts[2,'nca'],mbts[2,'fr']+mbts[2,'ca']))
print(chisq.test(c,correct=FALSE))
print("CA vs other")
c <- rbind(c(mbts[1,'ca'],mbts[1,'fr']+mbts[1,'nca']),c(mbts[2,'ca'],mbts[2,'fr']+mbts[2,'nca']))
print(chisq.test(c,correct=FALSE))
mbts
c <- rbind(c(mbts[1,'nca'],mbts[1,'fr']+mbts[1,'ca']),c(mbts[2,'nca'],mbts[2,'fr']+mbts[2,'ca']))
c
if (antype == 0) {
print("NCA vs CA")
c <- rbind(c(mbts[1,'nca'],mbts[1,'fr']+mbts[1,'ca']),c(mbts[2,'nca'],mbts[2,'fr']+mbts[2,'ca']))
print(chisq.test(c,correct=FALSE))
}
if (antype == 1) {
print("NCA vs Other")
c <- rbind(c(mbts[1,'nca'],mbts[1,'fr']+mbts[1,'ca']),c(mbts[2,'nca'],mbts[2,'fr']+mbts[2,'ca']))
print(chisq.test(c,correct=FALSE))
print("CA vs other")
c <- rbind(c(mbts[1,'ca'],mbts[1,'fr']+mbts[1,'nca']),c(mbts[2,'ca'],mbts[2,'fr']+mbts[2,'nca']))
print(chisq.test(c,correct=FALSE))
}
rm(list=ls())
print("DAU: PLYM7")
print("Author: Andy Wills")
print("Credits: Developed from script by Angus Inkster")
print("Date: 2014-06-16")
source("plym7cap.R")
bigdta <- read.table("plym7data.txt", header = TRUE, sep = "\t")
code <- read.table("plym7code.txt", header = TRUE, sep = "\t",stringsAsFactors = FALSE)
ppts <- 82
blktype <- 3
print("PRIMARY ANALYSIS - Nonlearners excluded, all stimuli analysed")
plym7cap(crittype = 2, antype = 0)
print("ANALYSIS 2 - All participants, all stimuli analysed")
plym7cap(crittype = 0, antype = 0)
print("ANALYSIS 3 - All participants, OS-ambiguous test stimuli excluded")
plym7cap(crittype = 0, antype = 1)
View(bigdta)
View(bigdta)
View(bigdta[1001:2000,])
View(bigdta[5001:6000,])
View(bigdta[10001:11000,])
View(code)
rm(list=ls())
source("plym7cap.R")
bigdta <- read.table("plym7data.txt", header = TRUE, sep = "\t")
code <- read.table("plym7code.txt", header = TRUE, sep = "\t",stringsAsFactors = FALSE)
ppts <- 82
blktype <- 3
print("PRIMARY ANALYSIS - Nonlearners excluded, all stimuli analysed")
plym7cap(crittype = 2, antype = 0)
print("PRIMARY ANALYSIS - Nonlearners excluded, all stimuli analysed")
plym7cap(crittype = 2, antype = 0)
rm(list=ls())
print("DAU: PLYM7")
print("Author: Andy Wills")
print("Credits: Developed from script by Angus Inkster")
print("Date: 2014-06-16")
source("plym7cap.R")
bigdta <- read.table("plym7data.txt", header = TRUE, sep = "\t")
code <- read.table("plym7code.txt", header = TRUE, sep = "\t",stringsAsFactors = FALSE)
ppts <- 82
blktype <- 3
print("PRIMARY ANALYSIS - Nonlearners excluded, all stimuli analysed")
plym7cap(crittype = 2, antype = 0)
print("ANALYSIS 2 - All participants, all stimuli analysed")
plym7cap(crittype = 0, antype = 0)
print("ANALYSIS 3 - All participants, OS-ambiguous test stimuli excluded")
plym7cap(crittype = 0, antype = 1)
rm(list=ls())
print("DAU: PLYM7")
print("Author: Andy Wills")
print("Credits: Developed from script by Angus Inkster")
print("Date: 2014-12-02")
source("plym7cap.R")
bigdta <- read.table("plym7data.txt", header = TRUE, sep = "\t")
code <- read.table("plym7code.txt", header = TRUE, sep = "\t",stringsAsFactors = FALSE)
ppts <- 82
blktype <- 3
print("PRIMARY ANALYSIS - Nonlearners excluded, all stimuli analysed")
plym7cap(crittype = 2, antype = 0)
rm(list=ls())
print("DAU: PLYM7")
print("Author: Andy Wills")
print("Credits: Developed from script by Angus Inkster")
print("Date: 2014-12-02")
source("plym7cap.R")
bigdta <- read.table("plym7data.txt", header = TRUE, sep = "\t")
code <- read.table("plym7code.txt", header = TRUE, sep = "\t",stringsAsFactors = FALSE)
ppts <- 82
blktype <- 3
print("PRIMARY ANALYSIS - Nonlearners excluded, all stimuli analysed")
plym7cap(crittype = 2, antype = 0)
print("ANALYSIS 2 - All participants, all stimuli analysed")
plym7cap(crittype = 0, antype = 0)
print("ANALYSIS 3 - All participants, OS-ambiguous test stimuli excluded")
plym7cap(crittype = 0, antype = 1)
rm(list=ls())
print("PLYM7 - Logistic regression")
print("Author: Andy Wills")
print("Date: 2014-12-04")
# Define custom function
featcon <- function(dataset) {
require(logistf)
firth.model <- logistf(resp ~ ca + nca1 + nca2 + nca3 + ca,data=dataset)
resul <- c(firth.model$coeff,firth.model$prob)
names(resul) <- c('intercept.coef','ca.coef','nca1.coef','nca2.coef','nca3.coef','intercept.p','ca.p','nca1.p','nca2.p','nca3.p')
return(resul)
}
# Load data file and decode file
code <- read.table("plym7code.txt", header = TRUE, sep = "\t",stringsAsFactors = FALSE,row.names=NULL)
dta <- read.table("plym7data.txt", header = TRUE, sep = "\t")
# Add stimulus dimensions to data file.
decode <- code[dta$stim,4:7]
dta <- cbind(dta,decode)
View(dta)
View(code)
View(decode)
levels(factor(dta$stim))
hist(dta$stim)
tstdta <- dta[dta$phase==3,]
decode <- code[tstdta$stim,4:7]
rm(dta)
tstdta <- cbind(tstdta,decode)
rm(decode,code)
View(tstdta)
tstdta$cond[tstdta$cond == 1] <- 'load'
tstdta$cond[tstdta$cond == 2] <- 'noload'
View(tstdta)
# Run through subjects
subjs <- as.numeric(levels(as.factor(tstdta$subj)))
results <- array(0,dim=c(length(subjs),18))
results <- data.frame(results)
colnames(results) <- c('subj','cond','ndim','intercept.coef','ca.coef','nca1.coef','nca2.coef','nca3.coef',
'intercept.p','ca.p','nca1.p','nca2.p','nca3.p','coef4','coef3','coef2','coef1','strongca')
i <- 0
for(subindex in subjs) {
i <- i + 1
onesub <- tstdta[tstdta$subj == subindex,]
results[i,1] <- subindex
results[i,4:13] <- featcon(onesub)
results[i,3] <- sum(results[i,10:13] < .05) # This counts number of features where p < .05
tmp <- results[i,5:8]
results[i,14:17] <- tmp[order(abs(tmp))]
if (results[i,5] == results[i,17]) results[i,18] <- 1 # Is strongest dimension criterial?
results[i,2] <- onesub$cond[1]
}
View(results)
# Remove those with no dimensions controlling behavior
results <- results[results$ndim != 0,]
print('Dimensions DV descriptives')
tbl <- table(results$ndim,results$cond)
props <- tbl
props[,1] <- props[,1]/sum(props[,1])
props[,2] <- props[,2]/sum(props[,2])
print(props)
print('Criterial DV descriptives')
crit <- table(results$strongca,results$cond)
rownames(crit) <- c('NCA','CA')
critprops <- crit
critprops[,1] <- critprops[,1]/sum(critprops[,1])
critprops[,2] <- critprops[,2]/sum(critprops[,2])
print(critprops)
print('Criterial DV chi-square test')
print(chisq.test(crit,correct=FALSE))
print('Dimensions DV chi-square test')
print(chisq.test(tbl,simulate.p.value=TRUE, B = 200000))
print('Dimensions DV Bayesian contingency table')
library(conting)
#Reshape data
y <- c(tbl[,1],tbl[,2])
cond <- c(rep('incidental',4),rep('intentional',4))
ndim <- c(rep(c(1,2,3,4),2))
mb <- data.frame(cond,ndim,y)
print("MC methods, 10k iterations (not stable with fewer)")
test <- bcct(formula=y~(ndim+cond)^2,data=mb,n.sample=10000,prior="UIP")
summary(test)
print(.18/.82) # Done manually for simplicity (could read test structure directly)
?logistf
library(logistf)
?logistf
citation('logistf')
